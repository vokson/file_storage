import pydantic

from backend.core import exceptions

# COMMAND_RESULTS_RESPONSE_CODES = {
#     command_results.AuthTokenNotAllowed: "Auth.Token.NotAllowed",
#     command_results.DatabaseErrorIntegrity: "Database.Error.Integrity",
#     command_results.DatabaseErrorProtected: "Database.Error.Protected",
#     command_results.DatabaseErrorValidation: "Database.Error.Validation",
#     command_results.AuthCredentialsFail: "Auth.Credentials.Fail",
#     command_results.AuthCredentialsBlocked: "Auth.Credentials.Blocked",
#     command_results.ActiveDirectoryError: "Auth.Credentials.ActiveDirectoryError",
#     command_results.WrongBehalfOnUser: "User.Error.WrongOnBehalf",
#     command_results.ParameterBodyWrong: "Parameter.Body.Wrong",
#     command_results.ParameterQueryWrong: "Parameter.Query.Wrong",
#     command_results.ParameterPathWrong: "Parameter.Path.Wrong",
#     command_results.StorageNotAvailable: "Storage.Error.NotAvailable",
#     command_results.SettingNotAvailable: "Setting.Error.NotAvailable",
#     command_results.DocumentBlocked: "Document.Error.Blocked",
#     command_results.ApprovalAlreadyDone: "Approval.Error.AlreadyDone",
#     command_results.ApprovalCanNotBeDeleted: "Approval.Error.CanNotBeDeleted",
#     command_results.ApprovalCanNotDelegate: "Approval.Error.CanNotDelegate",
#     command_results.ApprovalAlreadyDelegated: "Approval.Error.AlreadyDelegated",
#     command_results.ApprovalHasBeenDelegatedWithReturn: "Approval.Error.HasBeenDelegatedWithReturn",
#     command_results.ApprovalFileCanNotBeDeleted: "Approval.Error.FileCanNotBeDeleted",
#     command_results.ApprovalFlowBlocked: "ApprovalFlow.Error.Blocked",
#     command_results.ApprovalFlowDoesNotExist: "ApprovalFlow.Error.DoesNotExist",
#     command_results.ApprovalFlowAlreadyStopped: "ApprovalFlow.Error.AlreadyStopped",
#     command_results.ApprovalFlowAlreadyStarted: "ApprovalFlow.Error.AlreadyStarted",
#     command_results.FileBlockedAttachedToDocument: "File.Blocked.AttachedToDocument",
#     command_results.FileZeroSizeUploaded: "File.Uploaded.ZeroSize",
#     command_results.LargeZipFile: "File.Error.TooLarge",
#     command_results.MailChannelSettingsError: "MailChannel.Error.Settings",
#     command_results.MailMessageBodyNotFound: "MailMessage.Body.NotFound",
#     command_results.TransmittalCoverSheetError: "Transmittal.Error.CoverSheet",
#     command_results.PdfOperationError: "Pdf.Error.Operation",
#     command_results.PostCoveredError: "Post.Error.Covered",
#     command_results.MeasureAlreadyExistError: "Measure.Error.AlreadyExist",
#     command_results.MeasureSelfFollowError: "Measure.Error.SelfFollow",
#     command_results.MeasureDoesNotExistError: "Measure.Error.DoesNotExist",
#     command_results.CatalogueAlreadyExistError: "Catalogue.Error.AlreadyExist",
#     command_results.CatalogueNoPermissionToEdit: "Catalogue.Error.EditNoPermission",
#     command_results.ResourceAlreadyExistError: "Resource.Error.AlreadyExist",
#     command_results.ResourceItemAlreadyExistError: "ResourceItem.Error.AlreadyExist",
#     command_results.AlgorithmWrong: "Algorithm.Wrong",
#     command_results.ProjectAlreadyExistError: "Project.Error.AlreadyExist",
#     command_results.TitleAlreadyExistError: "Title.Error.AlreadyExist",
#     command_results.OrderDocumentCopyError: "Document.Error.Copy",
#     command_results.ActionNotApplicableError: "Action.Error.NotApplicable",
#     command_results.ActionAlreadyInProgress: "Action.Error.AlreadyInProgress",
# }

RESPONSE_CODES = {
    exceptions.FileNotFound: "File.Error.NotFound",
    # exceptions.AuthTokenFail: "Auth.Token.Fail",
    # exceptions.AuthTokenBlocked: "Auth.Token.Blocked",
    # exceptions.AuthTokenNotAllowed: "Auth.Token.NotAllowed",
    # exceptions.RequestBodyNotJson: "Request.Body.NotJson",
    # exceptions.ParameterBodyWrong: "Parameter.Body.Wrong",
    exceptions.ParameterPathWrong: "Parameter.Path.Error",
    # pydantic.ValidationError: ".Error.Wrong"
    # exceptions.ParameterQueryWrong: "Parameter.Query.Wrong",
}
