version: '3.8'

volumes:
  db_data: null
  file_storage:
    driver_opts:
      type: cifs
      o: uid=${STORAGE_UID},gid=${STORAGE_GID},sec=${STORAGE_SEC},dir_mode=${STORAGE_DIR_MODE},file_mode=${STORAGE_FILE_MODE},username=${STORAGE_USER},password=${STORAGE_PASSWORD},vers=${STORAGE_VERS},nobrl
      device: //10.95.27.244/${STORAGE_FOLDER}/_TEST

services:
  db:
    image: postgres:14.9-alpine
    volumes:
      - db_data:/var/lib/postgresql/data/
    restart: always
    environment:
      - POSTGRES_USER=${DB__USER}
      - POSTGRES_PASSWORD=${DB__PASSWORD}
      - POSTGRES_DB=${DB__DBNAME}
    ports:
      - "${DB__PORT}:${DB__PORT}"
    command: -p ${DB__PORT}

  # storage_db:
  #   image: postgres:14.5-alpine
  #   volumes:
  #     - storage_db_data:/var/lib/postgresql/data/
  #   restart: always
  #   environment:
  #     - POSTGRES_USER=${STORAGE_DB__USER}
  #     - POSTGRES_PASSWORD=${STORAGE_DB__PASSWORD}
  #     - POSTGRES_DB=${STORAGE_DB__DBNAME}
  #   ports:
  #     - "${STORAGE_DB__PORT}:${STORAGE_DB__PORT}"
  #   command: -p ${STORAGE_DB__PORT}

  nginx:
    image: nginx:1.25
    depends_on:
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  backend:
    build:
        context: ./backend
        dockerfile: ./Dockerfile
    depends_on:
      - db
    # deploy:
    #   mode: replicated
    #   replicas: 1
    env_file:
      - ./.env
    volumes:
      - file_storage:/storage
    restart: always
    command: ["python", "/backend/server.py"]

  # http_2:
  #   build:
  #       context: ./backend
  #       dockerfile: ./Dockerfile
  #   ports:
  #     - 8002:8080
  #   volumes:
  #     - file_storage:/storage
  #     - ./backend:/backend/
  #   restart: always
  #   command: ["python", "/backend/server.py"]

  # redis:
  #   image: redis:7.0.5-alpine
  #   volumes:
  #     - redis_data:/var/lib/redis
  #   restart: always

  # rabbit:
  #   image: rabbitmq:3.10-management
  #   restart: always
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=${RABBITMQ__USER}
  #     - RABBITMQ_DEFAULT_PASS=${RABBITMQ__PASSWORD}
  #     - RABBITMQ_DEFAULT_VHOST=${RABBITMQ__VHOST}
  #   ports:
  #     - "5672:5672"  # Порт открыт для возможности подключения внешних S3 серверов
  #     - "15672:15672"  # Порт открыт для возможности входа ревьювера

  # auth:
  #   build: auth
  #   depends_on:
  #     - auth_db
  #     - redis
  #   restart: always
  #   ports:
  #     - "8001:8001"
  #   env_file:
  #     - .env
  
  # storage:
  #   build: storage
  #   volumes:
  #     - temp_file_storage:/temp_storage/
  #   depends_on:
  #     - storage_db
  #     - redis
  #     - rabbit
  #   restart: always
  #   ports:
  #     - "8002:8002"
  #   env_file:
  #     - .env
  #   command: ["gunicorn", "src.entrypoints.main:app", "--workers", "4", "--worker-class", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8002", "--forwarded-allow-ips", "*"]

  # worker_event_listener:
  #   build: storage
  #   volumes:
  #     - temp_file_storage:/temp_storage/
  #   depends_on:
  #     - storage_db
  #     - redis
  #     - rabbit
  #   restart: always
  #   env_file:
  #     - .env
  #   command: ["python", "src/entrypoints/event_listener.py"]

  # worker_file_operator:
  #   build: storage
  #   volumes:
  #     - temp_file_storage:/temp_storage/
  #   depends_on:
  #     - storage_db
  #     - redis
  #     - rabbit
  #   restart: always
  #   env_file:
  #     - .env
  #   command: ["python", "src/entrypoints/file_operator.py"]

  # s1_1:
  #   image: 'quay.io/minio/minio:latest'
  #   ports:
  #     - '9001:9000'
  #     - '9091:9090'  # Порт открыт для возможности входа ревьювера
  #   depends_on:
  #     - rabbit
  #   volumes:
  #     - s1_1_data:/data/
  #   environment:
  #     - MINIO_ROOT_USER=${S3__USER}
  #     - MINIO_ROOT_PASSWORD=${S3__PASSWORD}
  #     - MINIO_NOTIFY_AMQP_ENABLE_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_URL_RABBIT=amqp://${RABBITMQ__USER}:${RABBITMQ__PASSWORD}@${RABBITMQ__HOST}:${RABBITMQ__PORT}/${RABBITMQ__VHOST}
  #     - MINIO_NOTIFY_AMQP_EXCHANGE_RABBIT=${RABBITMQ__EXCHANGE}
  #     - MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_RABBIT=topic
  #     - MINIO_NOTIFY_AMQP_ROUTING_KEY_RABBIT=S3.s1_1.EVENT
  #     - MINIO_NOTIFY_AMQP_DURABLE_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_MANDATORY_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_DELIVERY_MODE_RABBIT=2
  #   env_file:
  #     - .env
  #   command: server /data --console-address ":9090"

  # s1_2:
  #   image: 'quay.io/minio/minio:latest'
  #   ports:
  #     - '9002:9000'
  #     - '9092:9090'  # Порт открыт для возможности входа ревьювера
  #   depends_on:
  #     - rabbit
  #   volumes:
  #     - s1_2_data:/data/
  #   environment:
  #     - MINIO_ROOT_USER=${S3__USER}
  #     - MINIO_ROOT_PASSWORD=${S3__PASSWORD}
  #     - MINIO_NOTIFY_AMQP_ENABLE_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_URL_RABBIT=amqp://${RABBITMQ__USER}:${RABBITMQ__PASSWORD}@${RABBITMQ__HOST}:${RABBITMQ__PORT}/${RABBITMQ__VHOST}
  #     - MINIO_NOTIFY_AMQP_EXCHANGE_RABBIT=${RABBITMQ__EXCHANGE}
  #     - MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_RABBIT=topic
  #     - MINIO_NOTIFY_AMQP_ROUTING_KEY_RABBIT=S3.s1_2.EVENT
  #     - MINIO_NOTIFY_AMQP_DURABLE_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_MANDATORY_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_DELIVERY_MODE_RABBIT=2
  #   env_file:
  #     - .env
  #   command: server /data --console-address ":9090"

  # s1_3:
  #   image: 'quay.io/minio/minio:latest'
  #   ports:
  #     - '9003:9000'
  #     - '9093:9090'  # Порт открыт для возможности входа ревьювера
  #   depends_on:
  #     - rabbit
  #   volumes:
  #     - s1_3_data:/data/
  #   environment:
  #     - MINIO_ROOT_USER=${S3__USER}
  #     - MINIO_ROOT_PASSWORD=${S3__PASSWORD}
  #     - MINIO_NOTIFY_AMQP_ENABLE_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_URL_RABBIT=amqp://${RABBITMQ__USER}:${RABBITMQ__PASSWORD}@${RABBITMQ__HOST}:${RABBITMQ__PORT}/${RABBITMQ__VHOST}
  #     - MINIO_NOTIFY_AMQP_EXCHANGE_RABBIT=${RABBITMQ__EXCHANGE}
  #     - MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_RABBIT=topic
  #     - MINIO_NOTIFY_AMQP_ROUTING_KEY_RABBIT=S3.s1_3.EVENT
  #     - MINIO_NOTIFY_AMQP_DURABLE_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_MANDATORY_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_DELIVERY_MODE_RABBIT=2
  #   env_file:
  #     - .env
  #   command: server /data --console-address ":9090"

  # s2_1:
  #   image: 'quay.io/minio/minio:latest'
  #   ports:
  #     - '9004:9000'
  #     - '9094:9090'  # Порт открыт для возможности входа ревьювера
  #   depends_on:
  #     - rabbit
  #   volumes:
  #     - s2_1_data:/data/
  #   environment:
  #     - MINIO_ROOT_USER=${S3__USER}
  #     - MINIO_ROOT_PASSWORD=${S3__PASSWORD}
  #     - MINIO_NOTIFY_AMQP_ENABLE_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_URL_RABBIT=amqp://${RABBITMQ__USER}:${RABBITMQ__PASSWORD}@${RABBITMQ__HOST}:${RABBITMQ__PORT}/${RABBITMQ__VHOST}
  #     - MINIO_NOTIFY_AMQP_EXCHANGE_RABBIT=${RABBITMQ__EXCHANGE}
  #     - MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_RABBIT=topic
  #     - MINIO_NOTIFY_AMQP_ROUTING_KEY_RABBIT=S3.s2_1.EVENT
  #     - MINIO_NOTIFY_AMQP_DURABLE_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_MANDATORY_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_DELIVERY_MODE_RABBIT=2
  #   env_file:
  #     - .env
  #   command: server /data --console-address ":9090"

  # s3_1:
  #   image: 'quay.io/minio/minio:latest'
  #   ports:
  #     - '9005:9000'
  #     - '9095:9090'  # Порт открыт для возможности входа ревьювера
  #   depends_on:
  #     - rabbit
  #   volumes:
  #     - s3_1_data:/data/
  #   environment:
  #     - MINIO_ROOT_USER=${S3__USER}
  #     - MINIO_ROOT_PASSWORD=${S3__PASSWORD}
  #     - MINIO_NOTIFY_AMQP_ENABLE_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_URL_RABBIT=amqp://${RABBITMQ__USER}:${RABBITMQ__PASSWORD}@${RABBITMQ__HOST}:${RABBITMQ__PORT}/${RABBITMQ__VHOST}
  #     - MINIO_NOTIFY_AMQP_EXCHANGE_RABBIT=${RABBITMQ__EXCHANGE}
  #     - MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_RABBIT=topic
  #     - MINIO_NOTIFY_AMQP_ROUTING_KEY_RABBIT=S3.s3_1.EVENT
  #     - MINIO_NOTIFY_AMQP_DURABLE_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_MANDATORY_RABBIT=on
  #     - MINIO_NOTIFY_AMQP_DELIVERY_MODE_RABBIT=2
  #   env_file:
  #     - .env
  #   command: server /data --console-address ":9090"