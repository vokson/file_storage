version: '3.8'

networks:
  nw:
    driver: bridge
    ipam:
      # driver: default
      config:
        - subnet: 192.168.0.0/24
          gateway: 192.168.0.1

volumes:
  db_data: null
  file_storage:
    driver_opts:
      type: cifs
      o: uid=${STORAGE_UID},gid=${STORAGE_GID},sec=${STORAGE_SEC},dir_mode=${STORAGE_DIR_MODE},file_mode=${STORAGE_FILE_MODE},username=${STORAGE_USER},password=${STORAGE_PASSWORD},vers=${STORAGE_VERS},nobrl
      device: ${STORAGE_FOLDER}

services:
  db:
    image: postgres:14.9-alpine
    volumes:
      - db_data:/var/lib/postgresql/data/
    restart: always
    environment:
      - POSTGRES_USER=${DB__USER}
      - POSTGRES_PASSWORD=${DB__PASSWORD}
      - POSTGRES_DB=${DB__DBNAME}
    ports:
      - "${DB__PORT}:${DB__PORT}"
    networks:
      - nw
    command: -p ${DB__PORT}

  nginx:
    image: nginx:1.25
    depends_on:
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./cert/device.key:/cert/device.key:ro
      - ./cert/device.crt:/cert/device.crt:ro
    ports:
      - "4660:443"
      - "4661:80"
    networks:
      - nw
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  backend:
    build:
        context: ./backend
        dockerfile: ./Dockerfile
    depends_on:
      - db
    deploy:
      mode: replicated
      replicas: 2
    env_file:
      - ./.env
    volumes:
      - file_storage:/storage
    networks:
      - nw
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

    command: ["python", "/backend/server.py"]

  broker:
    build:
        context: ./backend
        dockerfile: ./Dockerfile
    depends_on:
      - db
    env_file:
      - ./.env
    networks:
      - nw
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    command: ["python", "/backend/broker.py"]

  worker:
    build:
        context: ./backend
        dockerfile: ./Dockerfile
    depends_on:
      - db
    env_file:
      - ./.env
    restart: always
    volumes:
      - file_storage:/storage
    networks:
      - nw
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

    #  Данный скрипт копирует переменные окружения в файл /etc/security/pam_env.conf
    #  чтобы CRON мог иметь такие же переменные окружения
    entrypoint: ["/backend/cron/docker-entrypoint.sh"]
    command: ["/bin/bash", "-c", "service cron start && python /backend/worker.py"]
